# 本文件定义 hibernate参数配置
# 如果sessionFactory使用dataSource来初始化，就不需再在本文件配置数据库连接相关参数

################################################### Hibernate 配置属性 ###################################################

#SQL方言,与具体的jdbc驱动相关
#hibernate.dialect = org.hibernate.dialect.Oracle9iDialect
#hibernate.dialect = org.hibernate.dialect.HSQLDialect
#hibernate.dialect =org.hibernate.dialect.H2Dialect
hibernate.dialect =org.hibernate.dialect.MySQL5InnoDBDialect

#是否将sql打印到控制台
#	默认值: false
hibernate.show_sql = false

#是否在将sql打印到控制台前,将sql格式化
#	默认值: false
hibernate.format_sql = false

#是否在生成的SQL中添加注释，以方便调试
#	默认值: false
hibernate.use_sql_comments = false

#默认的schema名
#hibernate.default_schema = h3play

#默认的catalog名
#hibernate.default_catalog = 

#SessionFactory创建后，将自动将这个名字绑定到JNDI中
#hibernate.session_factory_name = hibernate/SessionFactory

#为单向关联(一对一、多对一)的外连接抓取(outer join fetching)树设置最大深度
#	推荐值：0, 1, 2, 3 	(0 意味着关闭默认的外连接抓取)
hibernate.max_fetch_depth = 3

#为Hibernate关联的批量抓取(batch fetching)设置默认数量
# 推荐值：4, 8, 16
# 默认值: 1
hibernate.default_batch_fetch_size = 4

# 默认的EntityMode(实体表现形式)
#	可选值: pojo/dom4j/dynamic-map
#	默认值: pojo
hibernate.default_entity_mode = pojo

#强制Hibernate按照被更新数据的主键，为SQL更新排序。这么做将减少在高并发系统中事务的死锁
#hibernate.order_updates = true

#是否收集统计数据
#	默认值: false
hibernate.generate_statistics = true

#如果开启，在对象被删除时生成的标识属性将被重设为默认值
#hibernate.use_identifer_rollback = true

################################################ Hibernate JDBC和连接属性 #################################################
#指定JDBC抓取数量的大小 (调用Statement.setFetchSize())
hibernate.jdbc.fetch_size = 60
#允许Hibernate使用JDBC2的批量更新. 取值建议取5到30之间的值
hibernate.jdbc.batch_size = 30

################################################### Hibernate 缓存属性 ###################################################

#是否使用二级缓存
#	默认值: true
#hibernate.cache.use_second_level_cache = true

#CacheProvider 的实现类
#hibernate.cache.provider_class = org.hibernate.cache.NoCacheProvider
#hibernate.cache.provider_class = net.sf.ehcache.hibernate.SingletonEhCacheProvider

#是否以频繁的读操作为代价，优化二级缓存来最小化写操作. 该值对于群集缓存非常有用
#	默认值: false
#hibernate.cache.use_minimal_puts = true

#允许查询缓存, 个别查询仍然需要设置为可缓存的
#	默认值: false
#hibernate.cache.use_query_cache = true

#QueryCacheFactory的实现类
#hibernate.cache.query_cache_factory = org.hibernate.cache.StandardQueryCacheFactory

#二级缓存区域名前缀
#hibernate.cache.region_prefix = h3

#强制Hibernate以更人性化的格式将数据存入二级缓存
#hibernate.cache.use_structured_entries = true

################################################### Hibernate 事务属性 ###################################################


#Enable automatic session close at end of transaction
#	默认值: false
#hibernate.transaction.auto_close_session = true

#Enable automatic flush during the JTA beforeCompletion() callback
#	默认值: false
#hibernate.transaction.flush_before_completion = true


################################################### Hibernate 其它属性 ###################################################

#hbm2ddl
#	可选值: validate/update/create/create-drop
#	默认值: null
hibernate.hbm2ddl.auto = create

#Context scoping impl for org.hibernate.SessionFactory#getCurrentSession() processing
#	可选值: jta/thread/managed
#	默认值: jta
#hibernate.current_session_context_class = thread

#HQL解析器的实现
hibernate.query.factory_class = org.hibernate.hql.ast.ASTQueryTranslatorFactory
#hibernate.query.factory_class = org.hibernate.hql.classic.ClassicQueryTranslatorFactory

# 字节码 provider name
#	可选值: javassist/cglib
#	默认值: javassist
#hibernate.bytecode.provider = cglib

################################################### system-level properties ###################################################

# 是否使用java.io流通过JDBC读写二进制数据
#	默认值: false
hibernate.jdbc.use_streams_for_binary = true

# 是否打开 reflection optimizer
#	默认值: false
hibernate.bytecode.use_reflection_optimizer =true

################################################### listener properties ###################################################

#listener 目前还有问题
#hibernate.event.save=com.team.cmc.infrastructure.persistence.hibernate.listener.EventListener